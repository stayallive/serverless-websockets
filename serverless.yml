service: serverless-websockets

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  runtime: provided.al2
  apiGateway:
    shouldStartNameWithService: true
  environment:
    # Variables the app needs to operate
    APP_STAGE: ${opt:stage, self:provider.stage}
    APP_REGION: ${opt:region, self:provider.region}
    APP_API_ID: !Ref "HttpApi"
    APP_SQS_URL: !Ref "SQSWebhookQueue"
    APP_DB_TABLE: !Ref "DynamoDBTable"
    APP_WS_API_ID: !Ref "WebsocketsApi"
    APP_LOG_LEVEL: ${ssm:/serverless-websockets/${self:provider.stage}/log-level, 'info'}

    # Configure the Pusher protocol app ID, key and secret
    APP_ID: ${ssm:/serverless-websockets/${self:provider.stage}/app-id}
    APP_KEY: ${ssm:/serverless-websockets/${self:provider.stage}/app-key}
    APP_SECRET: ${ssm:/serverless-websockets/${self:provider.stage}/app-secret}

    # Set the webhook target (https url) and the events that should be sent, leave emtpy to disable
    APP_WEBHOOK_TARGET: ${ssm:/serverless-websockets/${self:provider.stage}/webhook-target, ''}
    # All available events: channel_occupied,channel_vacated,member_added,member_removed,client_event
    # For more info see: https://pusher.com/docs/channels/server_api/webhooks
    # Set the value to a comma seperated string, for example: channel_occupied,channel_vacated,client_event
    APP_WEBHOOK_EVENTS: ${ssm:/serverless-websockets/${self:provider.stage}/webhook-events, ''}
    # This value will show up in the User-Agent header for webhook requests
    APP_WEBHOOK_USER_AGENT: WebhookSlinger-ServerlessWebsockets/${self:provider.stage}

    # Configure the server to allow client events on authenticated channels
    APP_CLIENT_EVENTS: ${ssm:/serverless-websockets/${self:provider.stage}/client-events-enabled, 'false'}

    # Deploy to /wave a example app using a presence channel
    APP_WAVE_EXAMPLE_ENABLED: ${ssm:/serverless-websockets/${self:provider.stage}/wave-example-enabled, 'false'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub "${DynamoDBTable.Arn}"
        - !Sub "${DynamoDBTable.Arn}/index/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - !Sub "${SQSWebhookQueue.Arn}"
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: '*'
      Condition:
        StringEquals:
          cloudwatch:namespace: ServerlessWebSockets
  logRetentionInDays: 30

functions:
  api:
    handler: handlers/api.php
    timeout: 28
    layers:
      - ${bref:layer.php-74-fpm}
    events:
      - httpApi: '*'
    description: 'Serverless Websockets API'
  cli:
    handler: handlers/cli.php
    timeout: 300
    layers:
      - ${bref:layer.php-74}
    description: 'Serverless Websockets CLI'
    events:
      - schedule:
          rate: rate(1 minute)
          input:
            action: 'write-cloudwatch-metrics'
          enabled: ${strToBool(${ssm:/serverless-websockets/${self:provider.stage}/write-cloudwatch-metrics, 'false'})}
          description: 'Serverless Websockets Write CloudWatch metrics'
      - schedule:
          rate: rate(4 hours)
          input:
            action: 'cleanup-stale-connections'
          enabled: ${strToBool(${ssm:/serverless-websockets/${self:provider.stage}/cleanup-stale-connections, 'true'})}
          description: 'Serverless Websockets Cleanup stale connections'
  websocket:
    handler: handlers/websocket.php
    timeout: 10
    layers:
      - ${bref:layer.php-74}
    events:
      - websocket: $connect
      - websocket: $disconnect
      - websocket: $default
    description: 'Serverless Websockets WS'
  webhook-worker:
    handler: handlers/webhook-worker.php
    layers:
      - ${bref:layer.php-74}
    timeout: 300
    reservedConcurrency: 10
    events:
      - sqs:
          arn: !GetAtt "SQSWebhookQueue.Arn"
          enabled: ${strToBool(${ssm:/serverless-websockets/${self:provider.stage}/webhook-enabled, 'false'})}
          batchSize: 1
    description: 'Serverless Websockets Webhook'

resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverless-websockets-${self:provider.stage}
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
    # This queue is used to asynchronously handle sending webhooks
    SQSWebhookQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: serverless-websockets-webhooks-${self:provider.stage}
        # Wait this amount of time before allowing a message to become visible again to other workers
        VisibilityTimeout: 360
        # We retry up to 4 times this way although we should have HTTP failures be handled inside the Lambda
        # and try to never fail the execution so we don't hammer the webhook target with a large amount of events
        MessageRetentionPeriod: 1440

plugins:
  - ./vendor/bref/bref

package:
  exclude:
    - 'node_modules/**'
    - 'tests/**'
    - 'bin/**'

configValidationMode: error
